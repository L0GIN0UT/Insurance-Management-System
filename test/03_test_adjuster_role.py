#!/usr/bin/env python3
"""
–¢–µ—Å—Ç 3: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–æ–ª–∏ –£–†–ï–ì–£–õ–ò–†–û–í–©–ò–ö
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫
- –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ –∑–∞—è–≤–∫–∞–º (–æ–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
- –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–∞—Ö
"""

import requests
import json
from typing import Dict, Any, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AUTH_BASE_URL = "http://localhost:8001"
BACKEND_BASE_URL = "http://localhost:8000"
TIMEOUT = 10

# –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞
ADJUSTER_CREDENTIALS = {
    "username": "test_adjuster",
    "password": "TestAdjuster123!"
}

class AdjusterTester:
    def __init__(self):
        self.access_token: Optional[str] = None
        self.headers: Dict[str, str] = {}
        self.test_claim_id: Optional[int] = None
    
    def authenticate(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞...")
        
        try:
            response = requests.post(
                f"{AUTH_BASE_URL}/auth/login",
                data=ADJUSTER_CREDENTIALS,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                token_data = response.json()
                self.access_token = token_data.get("access_token")
                if self.access_token:
                    self.headers = {"Authorization": f"Bearer {self.access_token}"}
                    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    return True
                else:
                    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def test_get_claims(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
        print("\nüìã –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/claims/",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                claims_data = response.json()
                claims = claims_data.get("claims", []) if isinstance(claims_data, dict) else claims_data
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫: {len(claims)} –∑–∞–ø–∏—Å–µ–π")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
                if claims and len(claims) > 0:
                    self.test_claim_id = claims[0].get("id")
                    print(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω ID –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤: {self.test_claim_id}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
            return False
    
    def test_get_pending_claims(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫"""
        print("\n‚è≥ –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/claims/pending",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                pending_data = response.json()
                pending_claims = pending_data.get("pending_claims", []) if isinstance(pending_data, dict) else pending_data
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: {len(pending_claims)} –∑–∞–ø–∏—Å–µ–π")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                if pending_claims and len(pending_claims) > 0 and not self.test_claim_id:
                    self.test_claim_id = pending_claims[0].get("id")
                    print(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω ID –æ–∂–∏–¥–∞—é—â–µ–π –∑–∞—è–≤–∫–∏: {self.test_claim_id}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫: {e}")
            return False
    
    def test_get_claim_details(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ"""
        if not self.test_claim_id:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        print(f"\nüîç –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ {self.test_claim_id}")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/claims/{self.test_claim_id}",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                claim = response.json()
                print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ –ø–æ–ª—É—á–µ–Ω–∞: —Å—É–º–º–∞ {claim.get('claim_amount', 0)}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    def test_make_decision_approve(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è - –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
        if not self.test_claim_id:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –∑–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
        print(f"\n‚úÖ –¢–µ—Å—Ç: –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ {self.test_claim_id}")
        
        decision_data = {
            "decision": "approved",
            "approved_amount": 4500,
            "notes": "–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        }
        
        try:
            response = requests.put(
                f"{BACKEND_BASE_URL}/api/v1/claims/{self.test_claim_id}/decision",
                headers=self.headers,
                json=decision_data,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                updated_claim = response.json()
                print(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –Ω–∞ —Å—É–º–º—É: {updated_claim.get('approved_amount', 0)}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏—è: {e}")
            return False
    
    def test_make_decision_reject(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è - –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
        # –î–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥—É—é
        print("\n‚ùå –¢–µ—Å—Ç: –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)")
        
        # –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã —É–∂–µ –æ–¥–æ–±—Ä–∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É, –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        decision_data = {
            "decision": "rejected",
            "approved_amount": 0,
            "notes": "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        fake_claim_id = 999
        
        try:
            response = requests.put(
                f"{BACKEND_BASE_URL}/api/v1/claims/{fake_claim_id}/decision",
                headers=self.headers,
                json=decision_data,
                timeout=TIMEOUT
            )
            
            # –û–∂–∏–¥–∞–µ–º 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞—è–≤–∫–∏, —á—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            if response.status_code in [200, 404]:
                print("‚úÖ –¢–µ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω (—Å–∏–º—É–ª—è—Ü–∏—è)")
                return True
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    def test_claims_filtering(self) -> bool:
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        print("\nüîç –¢–µ—Å—Ç: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É")
        
        try:
            # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É "submitted"
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/claims/?status=submitted",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                claims_data = response.json()
                submitted_claims = claims_data.get("claims", []) if isinstance(claims_data, dict) else claims_data
                print(f"‚úÖ –ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'submitted': {len(submitted_claims)} –∑–∞–ø–∏—Å–µ–π")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
            return False
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞"""
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä–æ–ª–∏ –£–†–ï–ì–£–õ–ò–†–û–í–©–ò–ö")
        print("=" * 60)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate():
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫", self.test_get_claims),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫", self.test_get_pending_claims),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ", self.test_get_claim_details),
            ("–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏", self.test_make_decision_approve),
            ("–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ (—Å–∏–º—É–ª—è—Ü–∏—è)", self.test_make_decision_reject),
            ("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫", self.test_claims_filtering),
        ]
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed += 1
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        success_rate = (passed / total) * 100
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –£–†–ï–ì–£–õ–ò–†–û–í–©–ò–ö–ê: {passed}/{total} ({success_rate:.1f}%)")
        
        if success_rate >= 80:
            print("üéâ –£–°–ü–ï–•! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = AdjusterTester()
    return tester.run_all_tests()

if __name__ == "__main__":
    main() 