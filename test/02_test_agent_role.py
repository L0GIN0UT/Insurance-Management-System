#!/usr/bin/env python3
"""
–¢–µ—Å—Ç 2: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–æ–ª–∏ –ê–ì–ï–ù–¢
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–≥–µ–Ω—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, —Ä–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏)
"""

import requests
import json
from typing import Dict, Any, Optional
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AUTH_BASE_URL = "http://localhost:8001"
BACKEND_BASE_URL = "http://localhost:8000"
TIMEOUT = 10

# –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
AGENT_CREDENTIALS = {
    "username": "test_agent",
    "password": "TestAgent123!"
}

class AgentTester:
    def __init__(self):
        self.token = None
        self.headers = None
        self.test_client_id = None
        self.test_contract_id = None
        self.product_id = None  # –†–µ–∞–ª—å–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞
    
    def authenticate(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞...")
        
        try:
            response = requests.post(
                f"{AUTH_BASE_URL}/auth/login",
                data={
                    "username": "test_agent",
                    "password": "TestAgent123!"
                },
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                data = response.json()
                self.token = data["access_token"]
                self.headers = {"Authorization": f"Bearer {self.token}"}
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def get_first_product_id(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/products/",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                products = response.json()
                if products and len(products) > 0:
                    self.product_id = products[0]["id"]
                    print(f"üì¶ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç ID: {self.product_id} - {products[0]['name']}")
                    return True
                else:
                    print("‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
            return False
    
    def test_get_clients(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        print("\nüìã –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/clients/",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                clients = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)} –∑–∞–ø–∏—Å–µ–π")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
            return False
    
    def test_create_client(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        print("\nüë§ –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
        
        timestamp = int(time.time())
        
        client_data = {
            "first_name": "–¢–µ—Å—Ç–æ–≤—ã–π",
            "last_name": "–ö–ª–∏–µ–Ω—Ç –ê–≥–µ–Ω—Ç–∞",
            "email": f"agent_client_{timestamp}@test.com",
            "phone": "+7999123456",
            "address": "–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å, 123",
            "date_of_birth": "1990-01-01"
        }
        
        try:
            response = requests.post(
                f"{BACKEND_BASE_URL}/api/v1/clients/",
                json=client_data,
                headers={"Authorization": f"Bearer {self.token}"}
            )
            
            if response.status_code == 200:
                created_client = response.json()
                self.test_client_id = created_client["id"]
                print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {created_client['first_name']} {created_client['last_name']} (ID: {self.test_client_id})")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    def test_get_client(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ"""
        if not self.test_client_id:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
            
        print(f"\nüîç –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ {self.test_client_id}")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/clients/{self.test_client_id}",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                client = response.json()
                print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –ø–æ–ª—É—á–µ–Ω–∞: {client.get('full_name')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False
    
    def test_get_contracts(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤"""
        print("\nüìã –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–≥–æ–≤–æ—Ä–æ–≤")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/contracts/",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                contracts = response.json()
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ–≥–æ–≤–æ—Ä–æ–≤: {len(contracts)} –∑–∞–ø–∏—Å–µ–π")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤: {e}")
            return False
    
    def test_calculate_premium(self) -> bool:
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏"""
        print("\nüí∞ –¢–µ—Å—Ç: –†–∞—Å—á–µ—Ç –ø—Ä–µ–º–∏–∏")
        
        calculation_data = {
            "product_id": self.product_id,
            "coverage_amount": 100000,
            "client_age": 30,
            "coverage_period": 12
        }
        
        try:
            response = requests.post(
                f"{BACKEND_BASE_URL}/api/v1/contracts/calculate",
                headers=self.headers,
                json=calculation_data,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                calculation = response.json()
                premium = calculation.get("premium_amount", 0)
                print(f"‚úÖ –ü—Ä–µ–º–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {premium} —Ä—É–±.")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–µ–º–∏–∏: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–µ–º–∏–∏: {e}")
            return False
    
    def test_create_contract(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞"""
        if not self.test_client_id:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
            
        print(f"\nüìù –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {self.test_client_id}")
        
        contract_data = {
            "client_id": self.test_client_id,
            "product_id": self.product_id,
            "coverage_amount": 100000,
            "premium_amount": 5000,
            "start_date": "2024-01-01",
            "end_date": "2024-12-31"
        }
        
        try:
            response = requests.post(
                f"{BACKEND_BASE_URL}/api/v1/contracts/",
                headers=self.headers,
                json=contract_data,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                created_contract = response.json()
                self.test_contract_id = created_contract["id"]
                print(f"‚úÖ –î–æ–≥–æ–≤–æ—Ä —Å–æ–∑–¥–∞–Ω: {created_contract['contract_number']} (ID: {self.test_contract_id})")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞: {e}")
            return False
    
    def test_get_contract(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–≥–æ–≤–æ—Ä–µ"""
        if not self.test_contract_id:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –¥–æ–≥–æ–≤–æ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
            
        print(f"\nüîç –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–≥–æ–≤–æ—Ä–µ {self.test_contract_id}")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/contracts/{self.test_contract_id}",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                contract = response.json()
                print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–≥–æ–≤–æ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∞: —Å—É–º–º–∞ –ø–æ–∫—Ä—ã—Ç–∏—è {contract.get('coverage_amount')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞: {e}")
            return False
    
    def run_tests(self) -> None:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∞–≥–µ–Ω—Ç–∞"""
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä–æ–ª–∏ –ê–ì–ï–ù–¢")
        print("=" * 60)
        
        if not self.authenticate():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
            return
        
        if not self.get_first_product_id():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–æ–¥—É–∫—Ç–∞")
            return
        
        tests = [
            self.test_get_clients,
            self.test_create_client,
            self.test_get_client,
            self.test_get_contracts,
            self.test_calculate_premium,
            self.test_create_contract,
            self.test_get_contract
        ]
        
        passed = 0
        total = len(tests)
        
        for test in tests:
            if test():
                passed += 1
        
        print("\n" + "=" * 60)
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ê–ì–ï–ù–¢–ê: {passed}/{total} ({passed/total*100:.1f}%)")
        
        if passed == total:
            print("üéâ –£–°–ü–ï–•! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–≥–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∞–≥–µ–Ω—Ç–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = AgentTester()
    tester.run_tests()

if __name__ == "__main__":
    main() 