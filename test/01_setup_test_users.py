#!/usr/bin/env python3
"""
–¢–µ—Å—Ç 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö 5 —Ä–æ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
"""

import requests
import json
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AUTH_BASE_URL = "http://localhost:8001"
BACKEND_BASE_URL = "http://localhost:8000"
TIMEOUT = 10

# –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
TEST_USERS = {
    "agent": {
        "username": "test_agent",
        "email": "agent@test.com",
        "password": "TestAgent123!",
        "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ê–≥–µ–Ω—Ç",
        "role": "agent"
    },
    "adjuster": {
        "username": "test_adjuster", 
        "email": "adjuster@test.com",
        "password": "TestAdjuster123!",
        "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –£—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫",
        "role": "adjuster"
    },
    "operator": {
        "username": "test_operator",
        "email": "operator@test.com", 
        "password": "TestOperator123!",
        "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –û–ø–µ—Ä–∞—Ç–æ—Ä",
        "role": "operator"
    },
    "manager": {
        "username": "test_manager",
        "email": "manager@test.com",
        "password": "TestManager123!",
        "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ú–µ–Ω–µ–¥–∂–µ—Ä", 
        "role": "manager"
    },
    "admin": {
        "username": "test_admin",
        "email": "admin@test.com",
        "password": "TestAdmin123!",
        "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "role": "admin"
    }
}

def check_services_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ auth-service
        response = requests.get(f"{AUTH_BASE_URL}/health", timeout=TIMEOUT)
        if response.status_code == 200:
            print("‚úÖ Auth-service –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ö†Ô∏è Auth-service –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
    except Exception as e:
        print(f"‚ùå Auth-service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
        response = requests.get(f"{BACKEND_BASE_URL}/health", timeout=TIMEOUT)
        if response.status_code == 200:
            print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ö†Ô∏è Backend –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
    except Exception as e:
        print(f"‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return False
    
    return True

def register_user(user_data: Dict[str, Any]) -> bool:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = requests.post(
            f"{AUTH_BASE_URL}/auth/register",
            json=user_data,
            timeout=TIMEOUT
        )
        
        if response.status_code == 200:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} ({user_data['role']}) —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        elif response.status_code == 400:
            # –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                error_detail = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                if "already exists" in error_detail.lower() or "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" in error_detail.lower():
                    print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['username']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {user_data['username']}: {error_detail}")
                    return False
            except:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {user_data['username']}: {response.text}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {user_data['username']}: HTTP {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {user_data['username']}: {e}")
        return False

def verify_user_login(username: str, password: str, role: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        login_data = {
            "username": username,
            "password": password
        }
        
        response = requests.post(
            f"{AUTH_BASE_URL}/auth/login",
            data=login_data,  # form-data –¥–ª—è OAuth2
            timeout=TIMEOUT
        )
        
        if response.status_code == 200:
            token_data = response.json()
            if "access_token" in token_data:
                print(f"‚úÖ –í—Ö–æ–¥ {username} ({role}) —É—Å–ø–µ—à–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è {username}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ {username}: HTTP {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ {username}: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    if not check_services_availability():
        print("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
        return False
    
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    success_count = 0
    total_users = len(TEST_USERS)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for role, user_data in TEST_USERS.items():
        print(f"\nüë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª–∏ {role.upper()}:")
        if register_user(user_data):
            success_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {success_count}/{total_users}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞...")
    
    login_success_count = 0
    for role, user_data in TEST_USERS.items():
        if verify_user_login(user_data["username"], user_data["password"], role):
            login_success_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞: {login_success_count}/{total_users}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 70)
    if success_count == total_users and login_success_count == total_users:
        print("üéâ –£–°–ü–ï–•! –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:")
        for role, user_data in TEST_USERS.items():
            print(f"   {role.upper()}: {user_data['username']} / {user_data['password']}")
        return True
    else:
        print("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return False

if __name__ == "__main__":
    main() 