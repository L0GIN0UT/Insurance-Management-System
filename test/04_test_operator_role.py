#!/usr/bin/env python3
"""
–¢–µ—Å—Ç 4: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–æ–ª–∏ –û–ü–ï–†–ê–¢–û–†
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤
- –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫
- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫—É
- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫
"""

import requests
import json
from typing import Dict, Any, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AUTH_BASE_URL = "http://localhost:8001"
BACKEND_BASE_URL = "http://localhost:8000"
TIMEOUT = 10

# –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
OPERATOR_CREDENTIALS = {
    "username": "test_operator",
    "password": "TestOperator123!"
}

class OperatorTester:
    def __init__(self):
        self.token = None
        self.headers = None
        self.test_client_id = None
        self.test_claim_id = None
        self.test_contract_id = None  # –†–µ–∞–ª—å–Ω—ã–π ID –¥–æ–≥–æ–≤–æ—Ä–∞
        self.product_id = None  # –†–µ–∞–ª—å–Ω—ã–π ID –ø—Ä–æ–¥—É–∫—Ç–∞
    
    def authenticate(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            response = requests.post(
                f"{AUTH_BASE_URL}/auth/login",
                data={
                    "username": "test_operator",
                    "password": "TestOperator123!"
                },
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                data = response.json()
                self.token = data["access_token"]
                self.headers = {"Authorization": f"Bearer {self.token}"}
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def get_first_product_id(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/products/",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                products = response.json()
                if products and len(products) > 0:
                    self.product_id = products[0]["id"]
                    print(f"üì¶ –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç ID: {self.product_id} - {products[0]['name']}")
                    return True
                else:
                    print("‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
            return False
    
    def get_first_contract_id(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞"""
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/contracts/",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                contracts_data = response.json()
                contracts = contracts_data.get("contracts", []) if isinstance(contracts_data, dict) else contracts_data
                
                if contracts and len(contracts) > 0:
                    self.test_contract_id = contracts[0]["id"]
                    print(f"üìã –ù–∞–π–¥–µ–Ω –¥–æ–≥–æ–≤–æ—Ä ID: {self.test_contract_id}")
                    return True
                else:
                    print("‚ùå –î–æ–≥–æ–≤–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤: {e}")
            return False
    
    def test_get_clients(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        print("\nüìã –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/clients/",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                clients_data = response.json()
                clients = clients_data.get("clients", []) if isinstance(clients_data, dict) else clients_data
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)} –∑–∞–ø–∏—Å–µ–π")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
                if clients and len(clients) > 0:
                    self.test_client_id = clients[0].get("id")
                    print(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω ID –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤: {self.test_client_id}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
            return False
    
    def test_get_claims(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
        print("\nüìã –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/claims/",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                claims_data = response.json()
                claims = claims_data.get("claims", []) if isinstance(claims_data, dict) else claims_data
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫: {len(claims)} –∑–∞–ø–∏—Å–µ–π")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
            return False
    
    def test_create_claim(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
        print("\nüìù –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏")
        
        if not self.test_contract_id:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –¥–æ–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        claim_data = {
            "contract_id": self.test_contract_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –¥–æ–≥–æ–≤–æ—Ä–∞
            "incident_date": "2024-01-15",
            "description": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
            "claim_amount": 5000
        }
        
        try:
            response = requests.post(
                f"{BACKEND_BASE_URL}/api/v1/claims/",
                headers=self.headers,
                json=claim_data,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                created_claim = response.json()
                self.test_claim_id = created_claim["id"]
                print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {created_claim['claim_number']} (ID: {self.test_claim_id})")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    def test_submit_claim(self) -> bool:
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫—É"""
        print("\nüì§ –¢–µ—Å—Ç: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫—É")
        
        if not self.test_contract_id:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –¥–æ–≥–æ–≤–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        submit_data = {
            "contract_id": self.test_contract_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –¥–æ–≥–æ–≤–æ—Ä–∞
            "incident_date": "2024-01-15",
            "description": "–î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞ –¥–ª—è —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
            "claim_amount": 5000,
            "documents": ["document1.pdf", "document2.pdf"],
            "priority": "normal",
            "customer_contact": "operator_test@example.com"
        }
        
        try:
            response = requests.post(
                f"{BACKEND_BASE_URL}/api/v1/claims/submit",
                headers=self.headers,
                json=submit_data,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                submitted_claim = response.json()
                print(f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫—É (ID: {submitted_claim.get('claim_id')})")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    def test_get_claim_details(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ"""
        if not self.test_claim_id:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –∑–∞—è–≤–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return False
            
        print(f"\nüîç –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—è–≤–∫–µ {self.test_claim_id}")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/claims/{self.test_claim_id}",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                claim = response.json()
                print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ –ø–æ–ª—É—á–µ–Ω–∞: —Å—É–º–º–∞ {claim.get('claim_amount', 0)}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    def test_search_clients(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        print("\nüîç –¢–µ—Å—Ç: –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/clients/?search=test",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                clients_data = response.json()
                clients = clients_data.get("clients", []) if isinstance(clients_data, dict) else clients_data
                print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)} –∑–∞–ø–∏—Å–µ–π")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
            return False
    
    def test_claims_filtering(self) -> bool:
        """–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫"""
        print("\nüîç –¢–µ—Å—Ç: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/claims/?status=submitted",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                claims_data = response.json()
                claims = claims_data.get("claims", []) if isinstance(claims_data, dict) else claims_data
                print(f"‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {len(claims)} –∑–∞–ø–∏—Å–µ–π")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
            return False
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞"""
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä–æ–ª–∏ –û–ü–ï–†–ê–¢–û–†")
        print("=" * 60)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate():
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        if not self.get_first_product_id():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø—Ä–æ–¥—É–∫—Ç–∞")
            return False
        
        if not self.get_first_contract_id():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –¥–æ–≥–æ–≤–æ—Ä–∞")
            return False
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤", self.test_get_clients),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫", self.test_get_claims),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏", self.test_create_claim),
            ("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫—É", self.test_submit_claim),
            ("–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", self.test_search_clients),
            ("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É", self.test_claims_filtering)
        ]
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed += 1
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        success_rate = (passed / total) * 100
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –û–ü–ï–†–ê–¢–û–†–ê: {passed}/{total} ({success_rate:.1f}%)")
        
        if success_rate >= 80:
            print("üéâ –£–°–ü–ï–•! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = OperatorTester()
    return tester.run_all_tests()

if __name__ == "__main__":
    main() 