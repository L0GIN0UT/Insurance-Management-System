#!/usr/bin/env python3
"""
–¢–µ—Å—Ç 5: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–æ–ª–∏ –ú–ï–ù–ï–î–ñ–ï–†
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:
- –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
- –û—Ç—á–µ—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–ø—Ä–æ—Å–º–æ—Ç—Ä)
"""

import requests
import json
from typing import Dict, Any, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AUTH_BASE_URL = "http://localhost:8001"
BACKEND_BASE_URL = "http://localhost:8000"
TIMEOUT = 10

# –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
MANAGER_CREDENTIALS = {
    "username": "test_manager",
    "password": "TestManager123!"
}

class ManagerTester:
    def __init__(self):
        self.access_token: Optional[str] = None
        self.headers: Dict[str, str] = {}
    
    def authenticate(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        
        try:
            response = requests.post(
                f"{AUTH_BASE_URL}/auth/login",
                data=MANAGER_CREDENTIALS,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                token_data = response.json()
                self.access_token = token_data.get("access_token")
                if self.access_token:
                    self.headers = {"Authorization": f"Bearer {self.access_token}"}
                    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    return True
                else:
                    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def test_analytics_dashboard(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        print("\nüìä –¢–µ—Å—Ç: –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/analytics/dashboard",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                dashboard_data = response.json()
                print("‚úÖ –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                metrics = dashboard_data.get("metrics", {})
                if metrics:
                    print(f"   üìà –û–±—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã: {metrics.get('total_clients', 0)}")
                    print(f"   üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã: {metrics.get('active_contracts', 0)}")
                    print(f"   üéØ –ó–∞—è–≤–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {metrics.get('pending_claims', 0)}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            return False
    
    def test_finance_report(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\nüí∞ –¢–µ—Å—Ç: –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç")
        
        try:
            # –ó–∞–ø—Ä–æ—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            params = {
                "start_date": "2024-01-01",
                "end_date": "2024-12-31"
            }
            
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/analytics/reports/finance",
                headers=self.headers,
                params=params,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                finance_report = response.json()
                print("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                if isinstance(finance_report, dict):
                    total_premiums = finance_report.get("total_premiums", 0)
                    total_claims = finance_report.get("total_claims_paid", 0)
                    profit = finance_report.get("profit", 0)
                    
                    print(f"   üíµ –û–±—â–∏–µ –ø—Ä–µ–º–∏–∏: {total_premiums}")
                    print(f"   üí∏ –í—ã–ø–ª–∞—Ç—ã –ø–æ –∑–∞—è–≤–∫–∞–º: {total_claims}")
                    print(f"   üìä –ü—Ä–∏–±—ã–ª—å: {profit}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    def test_activity_report(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        print("\nüìà –¢–µ—Å—Ç: –û—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        try:
            # –ó–∞–ø—Ä–æ—Å –æ—Ç—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            params = {
                "period": "month"
            }
            
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/analytics/reports/activity",
                headers=self.headers,
                params=params,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                activity_report = response.json()
                print("‚úÖ –û—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if isinstance(activity_report, dict):
                    new_clients = activity_report.get("new_clients", 0)
                    new_contracts = activity_report.get("new_contracts", 0)
                    processed_claims = activity_report.get("processed_claims", 0)
                    
                    print(f"   üë• –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {new_clients}")
                    print(f"   üìù –ù–æ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã: {new_contracts}")
                    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: {processed_claims}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def test_users_overview(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüë• –¢–µ—Å—Ç: –û–±–∑–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/users/",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                users_data = response.json()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã UserList
                if isinstance(users_data, dict) and "users" in users_data:
                    users = users_data["users"]
                else:
                    users = users_data if isinstance(users_data, list) else []
                
                print(f"‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω: {len(users)} –∑–∞–ø–∏—Å–µ–π")
                
                # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–æ–ª—è–º
                roles_count = {}
                for user in users:
                    if isinstance(user, dict):
                        role = user.get("role", "unknown")
                    else:
                        role = "unknown"
                    roles_count[role] = roles_count.get(role, 0) + 1
                
                print("   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º:")
                for role, count in roles_count.items():
                    print(f"      {role}: {count}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False
    
    def test_custom_analytics(self) -> bool:
        """–¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        print("\nüìä –¢–µ—Å—Ç: –ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        try:
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
            params = {
                "start_date": "2024-01-01",
                "end_date": "2024-06-30",
                "group_by": "month"
            }
            
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/analytics/dashboard",
                headers=self.headers,
                params=params,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                analytics_data = response.json()
                print("‚úÖ –ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
            return False
    
    def test_export_reports(self) -> bool:
        """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤"""
        print("\nüì§ –¢–µ—Å—Ç: –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤")
        
        try:
            # –°–∏–º—É–ª—è—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞
            params = {
                "format": "json",
                "report_type": "finance"
            }
            
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/analytics/reports/finance",
                headers=self.headers,
                params=params,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                print("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä–æ–ª–∏ –ú–ï–ù–ï–î–ñ–ï–†")
        print("=" * 60)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate():
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏", self.test_analytics_dashboard),
            ("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç", self.test_finance_report),
            ("–û—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", self.test_activity_report),
            ("–û–±–∑–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", self.test_users_overview),
            ("–ö–∞—Å—Ç–æ–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", self.test_custom_analytics),
            ("–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–æ–≤", self.test_export_reports),
        ]
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed += 1
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        success_rate = (passed / total) * 100
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ú–ï–ù–ï–î–ñ–ï–†–ê: {passed}/{total} ({success_rate:.1f}%)")
        
        if success_rate >= 80:
            print("üéâ –£–°–ü–ï–•! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ManagerTester()
    return tester.run_all_tests()

if __name__ == "__main__":
    main() 