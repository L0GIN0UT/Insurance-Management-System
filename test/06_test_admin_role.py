#!/usr/bin/env python3
"""
–¢–µ—Å—Ç 6: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ä–æ–ª–∏ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π:
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏
- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
- –ê—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã
- –î–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ
"""

import requests
import json
from typing import Dict, Any, Optional

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
AUTH_BASE_URL = "http://localhost:8001"
BACKEND_BASE_URL = "http://localhost:8000"
TIMEOUT = 10

# –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_CREDENTIALS = {
    "username": "test_admin",
    "password": "TestAdmin123!"
}

class AdminTester:
    def __init__(self):
        self.access_token: Optional[str] = None
        self.headers: Dict[str, str] = {}
        self.test_user_id: Optional[int] = None
    
    def authenticate(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        try:
            response = requests.post(
                f"{AUTH_BASE_URL}/auth/login",
                data={
                    "username": "test_admin",
                    "password": "TestAdmin123!"
                },
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                data = response.json()
                self.access_token = data["access_token"]
                self.headers = {"Authorization": f"Bearer {self.access_token}"}
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def test_get_users(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\nüë• –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/users/",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                users_data = response.json()
                users = users_data.get("users", []) if isinstance(users_data, dict) else users_data
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)} –∑–∞–ø–∏—Å–µ–π")
                
                # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–æ–ª—è–º
                roles_count = {}
                for user in users:
                    if isinstance(user, dict):
                        role = user.get("role", "unknown")
                        roles_count[role] = roles_count.get(role, 0) + 1
                
                print("   üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º:")
                for role, count in roles_count.items():
                    print(f"      {role}: {count}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False
    
    def test_create_user(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print("\nüë§ –¢–µ—Å—Ç: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        user_data = {
            "username": "admin_test_user",
            "email": "admin_test@example.com",
            "full_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç –∞–¥–º–∏–Ω–∞",
            "role": "agent",
            "password": "TestPassword123!"
        }
        
        try:
            response = requests.post(
                f"{BACKEND_BASE_URL}/api/v1/users/",
                headers=self.headers,
                json=user_data,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                user = response.json()
                self.test_user_id = user.get("id")
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ (ID: {self.test_user_id})")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def get_real_user_id(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞"""
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/users/",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                users_data = response.json()
                users = users_data.get("users", []) if isinstance(users_data, dict) else users_data
                
                # –ò—â–µ–º –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
                for user in users:
                    if isinstance(user, dict) and user.get("role") != "admin":
                        return user.get("id")
                        
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if users and len(users) > 0:
                    return users[0].get("id", 1)
                    
            return 1  # Fallback ID
        except:
            return 1  # Fallback ID
    
    def test_get_roles(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π"""
        print("\nüîë –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/users/admin/roles",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                roles_data = response.json()
                print("‚úÖ –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—É—á–µ–Ω")
                
                if isinstance(roles_data, dict) and "roles" in roles_data:
                    roles = roles_data["roles"]
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–µ–π –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
                    role_names = [role.get("role", "unknown") for role in roles]
                    print(f"   üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: {', '.join(role_names)}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}")
            return False
    
    def test_assign_role(self) -> bool:
        """–¢–µ—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if not self.test_user_id:
            print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
            
        print(f"\nüîÑ –¢–µ—Å—Ç: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {self.test_user_id}")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç API
            response = requests.post(
                f"{BACKEND_BASE_URL}/api/v1/users/admin/roles/assign",
                headers=self.headers,
                params={
                    "user_id": self.test_user_id,
                    "new_role": "operator",
                    "reason": "–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
                },
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ –†–æ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {result.get('message', '–£—Å–ø–µ—Ö')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
            return False
    
    def test_audit_logs(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç –ª–æ–≥–æ–≤"""
        print("\nüìã –¢–µ—Å—Ç: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç –ª–æ–≥–æ–≤")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/users/admin/audit",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                audit_data = response.json()
                print("‚úÖ –ê—É–¥–∏—Ç –ª–æ–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã")
                
                if isinstance(audit_data, dict):
                    total_actions = audit_data.get("total_actions", 0)
                    recent_actions = audit_data.get("recent_actions", [])
                    
                    print(f"   üìä –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {total_actions}")
                    print(f"   üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: {len(recent_actions)}")
                
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏—Ç –ª–æ–≥–æ–≤: HTTP {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏—Ç –ª–æ–≥–æ–≤: {e}")
            return False
    
    def test_analytics_access(self) -> bool:
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ"""
        print("\nüìä –¢–µ—Å—Ç: –î–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/analytics/dashboard",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                dashboard_data = response.json()
                print("‚úÖ –î–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ: {e}")
            return False
    
    def test_finance_reports_access(self) -> bool:
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ—Ç—á–µ—Ç–∞–º"""
        print("\nüí∞ –¢–µ—Å—Ç: –î–æ—Å—Ç—É–ø –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ—Ç—á–µ—Ç–∞–º")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/analytics/reports/finance",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                finance_report = response.json()
                print("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ—Ç—á–µ—Ç–∞–º: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ—Ç—á–µ—Ç–∞–º: {e}")
            return False
    
    def test_activity_reports_access(self) -> bool:
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç—á–µ—Ç–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        print("\nüìà –¢–µ—Å—Ç: –î–æ—Å—Ç—É–ø –∫ –æ—Ç—á–µ—Ç–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/analytics/reports/activity",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                activity_report = response.json()
                print("‚úÖ –û—Ç—á–µ—Ç—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç—á–µ—Ç–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –æ—Ç—á–µ—Ç–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def test_user_management(self) -> bool:
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        real_user_id = self.get_real_user_id()
        print(f"\nüîß –¢–µ—Å—Ç: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {real_user_id}")
        
        try:
            response = requests.get(
                f"{BACKEND_BASE_URL}/api/v1/users/{real_user_id}",
                headers=self.headers,
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                user_info = response.json()
                print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–ª—É—á–µ–Ω–∞: {user_info.get('username', 'unknown')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: HTTP {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
            return False
    
    def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —Ä–æ–ª–∏ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†")
        print("=" * 60)
        
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        if not self.authenticate():
            print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            return False
        
        # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        tests = [
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", self.test_get_users),
            ("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", self.test_create_user),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π", self.test_get_roles),
            ("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏", self.test_assign_role),
            ("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç –ª–æ–≥–æ–≤", self.test_audit_logs),
            ("–î–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ", self.test_analytics_access),
            ("–î–æ—Å—Ç—É–ø –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ—Ç—á–µ—Ç–∞–º", self.test_finance_reports_access),
            ("–î–æ—Å—Ç—É–ø –∫ –æ—Ç—á–µ—Ç–∞–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", self.test_activity_reports_access),
            ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", self.test_user_management),
        ]
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
        passed = 0
        total = len(tests)
        
        for test_name, test_func in tests:
            try:
                if test_func():
                    passed += 1
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        success_rate = (passed / total) * 100
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê: {passed}/{total} ({success_rate:.1f}%)")
        
        if success_rate >= 80:
            print("üéâ –£–°–ü–ï–•! –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = AdminTester()
    return tester.run_all_tests()

if __name__ == "__main__":
    main() 