import React, { useState, useEffect } from 'react';
import './App.css';

// API Client –¥–ª—è —Å–≤—è–∑–∏ —Å auth-service
class APIClient {
  constructor() {
    this.token = localStorage.getItem('auth_token');
    this.baseURL = 'http://localhost:8001'; // Auth service URL
  }

  async request(endpoint, options = {}) {
    const url = `${this.baseURL}${endpoint}`;
    const config = {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      },
      ...options
    };

    if (this.token) {
      config.headers.Authorization = `Bearer ${this.token}`;
    }

    try {
      const response = await fetch(url, config);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.detail || 'Request failed');
      }

      return data;
    } catch (error) {
      console.error('API Request failed:', error);
      throw error;
    }
  }

  async login(username, password) {
    const formData = new FormData();
    formData.append('username', username);
    formData.append('password', password);

    const response = await this.request('/auth/login', {
      method: 'POST',
      headers: {},
      body: formData
    });

    if (response.access_token) {
      this.token = response.access_token;
      localStorage.setItem('auth_token', this.token);
      localStorage.setItem('user_data', JSON.stringify(response.user));
    }

    return response;
  }

  async register(userData) {
    const response = await this.request('/auth/register', {
      method: 'POST',
      body: JSON.stringify(userData)
    });

    return response;
  }

  async logout() {
    try {
      await this.request('/auth/logout', { method: 'POST' });
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      this.token = null;
      localStorage.removeItem('auth_token');
      localStorage.removeItem('user_data');
    }
  }

  async verifyToken() {
    if (!this.token) return false;
    
    try {
      await this.request('/auth/verify-token', { method: 'POST' });
      return true;
    } catch (error) {
      return false;
    }
  }
}

const apiClient = new APIClient();

function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [loginLoading, setLoginLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('');
  const [activeSection, setActiveSection] = useState('overview');
  const [isLogin, setIsLogin] = useState(true); // –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É –≤—Ö–æ–¥–æ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π

  useEffect(() => {
    checkAuth();
  }, []);

  const checkAuth = async () => {
    const userData = localStorage.getItem('user_data');
    if (userData && await apiClient.verifyToken()) {
      setUser(JSON.parse(userData));
      setIsAuthenticated(true);
    }
    setLoading(false);
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const username = formData.get('username');
    const password = formData.get('password');

    setLoginLoading(true);
    setMessage('');

    try {
      const response = await apiClient.login(username, password);
      setUser(response.user);
      setIsAuthenticated(true);
      setMessage('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!');
      setMessageType('success');
    } catch (error) {
      setMessage(error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞');
      setMessageType('error');
    } finally {
      setLoginLoading(false);
    }
  };

  const handleRegister = async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    
    const userData = {
      username: formData.get('username'),
      email: formData.get('email'),
      password: formData.get('password'),
      full_name: formData.get('full_name'),
      role: formData.get('role') || 'agent'
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
    const confirmPassword = formData.get('confirm_password');
    if (userData.password !== confirmPassword) {
      setMessage('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      setMessageType('error');
      return;
    }

    setLoginLoading(true);
    setMessage('');

    try {
      await apiClient.register(userData);
      setMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.');
      setMessageType('success');
      setIsLogin(true); // –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞
    } catch (error) {
      setMessage(error.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      setMessageType('error');
    } finally {
      setLoginLoading(false);
    }
  };

  const handleLogout = async () => {
    await apiClient.logout();
    setIsAuthenticated(false);
    setUser(null);
    setActiveSection('overview');
  };

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (!isAuthenticated) {
    return (
      <div className="login-container">
        <div className="login-box">
          <div className="logo">IMS</div>
          <h1>Insurance Management System</h1>
          <p className="subtitle">
            {isLogin ? '–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è' : '–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç'}
          </p>
          
          <div className="auth-toggle">
            <button 
              className={`toggle-btn ${isLogin ? 'active' : ''}`}
              onClick={() => {setIsLogin(true); setMessage('');}}
            >
              –í—Ö–æ–¥
            </button>
            <button 
              className={`toggle-btn ${!isLogin ? 'active' : ''}`}
              onClick={() => {setIsLogin(false); setMessage('');}}
            >
              –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            </button>
          </div>
          
          <form onSubmit={isLogin ? handleLogin : handleRegister}>
            <div className="form-group">
              <label htmlFor="username">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
              <input type="text" name="username" required />
            </div>
            
            {!isLogin && (
              <>
                <div className="form-group">
                  <label htmlFor="full_name">–ü–æ–ª–Ω–æ–µ –∏–º—è:</label>
                  <input type="text" name="full_name" required />
                </div>
                
                <div className="form-group">
                  <label htmlFor="email">Email:</label>
                  <input type="email" name="email" required />
                </div>
                
                <div className="form-group">
                  <label htmlFor="role">–†–æ–ª—å:</label>
                  <select name="role" defaultValue="agent">
                    <option value="agent">–°—Ç—Ä–∞—Ö–æ–≤–æ–π –∞–≥–µ–Ω—Ç</option>
                    <option value="adjuster">–£—Ä–µ–≥—É–ª–∏—Ä–æ–≤—â–∏–∫ —É–±—ã—Ç–∫–æ–≤</option>
                    <option value="operator">–û—Ñ–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä</option>
                    <option value="manager">–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ</option>
                    <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
                  </select>
                </div>
              </>
            )}
            
            <div className="form-group">
              <label htmlFor="password">–ü–∞—Ä–æ–ª—å:</label>
              <input type="password" name="password" required />
            </div>
            
            {!isLogin && (
              <div className="form-group">
                <label htmlFor="confirm_password">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:</label>
                <input type="password" name="confirm_password" required />
              </div>
            )}
            
            <button type="submit" className="btn" disabled={loginLoading}>
              {loginLoading ? (isLogin ? '–í—Ö–æ–¥...' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...') : (isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')}
            </button>
          </form>
          
          {message && (
            <div className={`message ${messageType}`}>
              {message}
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="dashboard">
      <header className="header">
        <div>
          <h1>Insurance Management System</h1>
          <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name || user.username}!</p>
        </div>
        <button onClick={handleLogout} className="logout-btn">
          –í—ã–π—Ç–∏
        </button>
      </header>

      <div className="dashboard-cards">
        <div className="dashboard-card" onClick={() => setActiveSection('clients')}>
          <h3>üë• –ö–ª–∏–µ–Ω—Ç—ã</h3>
          <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∫–ª–∏–µ–Ω—Ç–æ–≤</p>
        </div>
        
        <div className="dashboard-card" onClick={() => setActiveSection('contracts')}>
          <h3>üìã –î–æ–≥–æ–≤–æ—Ä—ã</h3>
          <p>–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã</p>
        </div>
        
        <div className="dashboard-card" onClick={() => setActiveSection('claims')}>
          <h3>üîç –°—Ç—Ä–∞—Ö–æ–≤—ã–µ —Å–ª—É—á–∞–∏</h3>
          <p>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–ª–µ–Ω–∏–π</p>
        </div>
        
        <div className="dashboard-card" onClick={() => setActiveSection('analytics')}>
          <h3>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
          <p>–û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</p>
        </div>
      </div>

      <div className="content">
        <h2>
          {activeSection === 'overview' && '–û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã'}
          {activeSection === 'clients' && '–ö–ª–∏–µ–Ω—Ç—ã'}
          {activeSection === 'contracts' && '–î–æ–≥–æ–≤–æ—Ä—ã'}
          {activeSection === 'claims' && '–°—Ç—Ä–∞—Ö–æ–≤—ã–µ —Å–ª—É—á–∞–∏'}
          {activeSection === 'analytics' && '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'}
        </h2>
        
        {activeSection === 'overview' && (
          <div>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ –º–µ–Ω—é –≤—ã—à–µ.</p>
            <div style={{ marginTop: '1rem' }}>
              <p><strong>–†–æ–ª—å:</strong> {user.role}</p>
              <p><strong>Email:</strong> {user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
            </div>
          </div>
        )}
        
        {activeSection !== 'overview' && (
          <p>–†–∞–∑–¥–µ–ª "{activeSection}" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</p>
        )}
      </div>
    </div>
  );
}

export default App; 