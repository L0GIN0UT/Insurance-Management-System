#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.core.config import get_settings
from app.db.models import InsuranceProduct
from app.db.database import create_tables

def init_sample_products():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    settings = get_settings()
    
    # Create database engine
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    # Ensure tables exist
    create_tables()
    
    # Create session
    db = SessionLocal()
    
    try:
        # Check if products already exist
        existing_products = db.query(InsuranceProduct).count()
        if existing_products > 0:
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {existing_products} —Å—Ç—Ä–∞—Ö–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
            return
        
        # Sample insurance products
        sample_products = [
            {
                "name": "–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –û–°–ê–ì–û",
                "description": "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏",
                "base_premium": 5000.0,
                "coverage_amount": 400000.0,
                "is_active": True
            },
            {
                "name": "–ê–≤—Ç–æ—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ö–ê–°–ö–û",
                "description": "–î–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç —É—â–µ—Ä–±–∞, —Ö–∏—â–µ–Ω–∏—è –∏ —É–≥–æ–Ω–∞",
                "base_premium": 35000.0,
                "coverage_amount": 1500000.0,
                "is_active": True
            },
            {
                "name": "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                "description": "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä, –¥–æ–º–æ–≤ –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                "base_premium": 8000.0,
                "coverage_amount": 3000000.0,
                "is_active": True
            },
            {
                "name": "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ",
                "description": "–î–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ (–î–ú–°)",
                "base_premium": 25000.0,
                "coverage_amount": 500000.0,
                "is_active": True
            },
            {
                "name": "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
                "description": "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –æ—Ç –Ω–µ—Å—á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –ø–æ–µ–∑–¥–∫–∞—Ö",
                "base_premium": 1500.0,
                "coverage_amount": 100000.0,
                "is_active": True
            }
        ]
        
        # Create products
        created_products = []
        for product_data in sample_products:
            product = InsuranceProduct(**product_data)
            db.add(product)
            created_products.append(product_data["name"])
        
        # Commit changes
        db.commit()
        
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞—Ö–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:")
        for name in created_products:
            print(f"   - {name}")
        
        print(f"\nüéâ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {len(created_products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        print("\nüìã –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:")
        print("   1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é 'agent'")
        print("   2. –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤")
        print("   3. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–µ–º–∏–∏ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    init_sample_products() 